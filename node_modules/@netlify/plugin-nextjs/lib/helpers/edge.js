"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfig = exports.writeMiddleware = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const loadMiddlewareManifest = (netlifyConfig) => {
    const middlewarePath = (0, path_1.resolve)(netlifyConfig.build.publish, 'server', 'middleware-manifest.json');
    if (!(0, fs_1.existsSync)(middlewarePath)) {
        return null;
    }
    return (0, fs_extra_1.readJson)(middlewarePath);
};
/**
 * Convert the Next middleware name into a valid Edge Function name
 */
const sanitizeName = (name) => `next${name === '/' ? '_index' : name.replace(/\W/g, '_')}`;
/**
 * Initialization added to the top of the edge function bundle
 */
const bootstrap = /* js */ `
globalThis._ENTRIES ||= {}
delete globalThis.window

`;
// TODO: set the proper env
const getEnv = () => /* js */ `
globalThis.process = { env: {} }
`;
/**
 * Concatenates the Next edge function code with the required chunks and adds an export
 */
const getMiddlewareBundle = async ({ middlewareDefinition, netlifyConfig, }) => {
    const { publish } = netlifyConfig.build;
    const chunks = [bootstrap, getEnv()];
    for (const file of middlewareDefinition.files) {
        const filePath = (0, path_1.join)(publish, file);
        const data = await fs_1.promises.readFile(filePath, 'utf8');
        chunks.push('{', data, '}');
    }
    const middleware = await fs_1.promises.readFile((0, path_1.join)(publish, `server`, `${middlewareDefinition.name}.js`), 'utf8');
    chunks.push(middleware);
    const exports = /* js */ `export default _ENTRIES["middleware_${middlewareDefinition.name}"].default;`;
    chunks.push(exports);
    return chunks.join('\n');
};
const copyEdgeSourceFile = ({ file, target, edgeFunctionDir, }) => fs_1.promises.copyFile((0, path_1.join)(__dirname, '..', '..', 'src', 'templates', 'edge', file), (0, path_1.join)(edgeFunctionDir, target !== null && target !== void 0 ? target : file));
// Edge functions don't support lookahead expressions
const stripLookahead = (regex) => regex.replace('^/(?!_next)', '^/');
/**
 * Writes Edge Functions for the Next middleware
 */
const writeMiddleware = async (netlifyConfig) => {
    const middlewareManifest = await loadMiddlewareManifest(netlifyConfig);
    if (!middlewareManifest) {
        console.error("Couldn't find the middleware manifest");
        return;
    }
    const manifest = {
        functions: [],
        version: 1,
    };
    const edgeFunctionRoot = (0, path_1.resolve)('.netlify', 'edge-functions');
    await (0, fs_extra_1.emptyDir)(edgeFunctionRoot);
    await copyEdgeSourceFile({ edgeFunctionDir: edgeFunctionRoot, file: 'ipx.ts' });
    manifest.functions.push({
        function: 'ipx',
        path: '/_next/image*',
    });
    for (const middleware of middlewareManifest.sortedMiddleware) {
        const name = sanitizeName(middleware);
        const edgeFunctionDir = (0, path_1.join)(edgeFunctionRoot, name);
        const middlewareDefinition = middlewareManifest.middleware[middleware];
        const bundle = await getMiddlewareBundle({
            middlewareDefinition,
            netlifyConfig,
        });
        await (0, fs_extra_1.ensureDir)(edgeFunctionDir);
        await fs_1.promises.writeFile((0, path_1.join)(edgeFunctionDir, 'bundle.js'), bundle);
        await copyEdgeSourceFile({
            edgeFunctionDir,
            file: 'runtime.ts',
            target: 'index.ts',
        });
        await copyEdgeSourceFile({ edgeFunctionDir, file: 'utils.ts' });
        manifest.functions.push({
            function: name,
            pattern: stripLookahead(middlewareDefinition.regexp),
        });
    }
    await (0, fs_extra_1.writeJson)((0, path_1.join)(edgeFunctionRoot, 'manifest.json'), manifest);
};
exports.writeMiddleware = writeMiddleware;
const updateConfig = async (publish) => {
    const configFile = (0, path_1.join)(publish, 'required-server-files.json');
    const config = await (0, fs_extra_1.readJSON)(configFile);
    config.config.env.NEXT_USE_NETLIFY_EDGE = 'true';
    await (0, fs_extra_1.writeJSON)(configFile, config);
};
exports.updateConfig = updateConfig;
